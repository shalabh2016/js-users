@page "/New"
@page "/Edit/{Id:int}"
@inject JsUsers.Services.UserDataService userDataService
@inject NavigationManager NavigationManager

<p>@NavigationManager.Uri</p>
@if (isEdit)
{
<h3>Edit User: @Id</h3>
}
else
{
<h3>New User</h3>

}


<EditForm Model="@_userModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <InputText id="firstname" @bind-Value="_userModel.FirstName" placeholder="First Name" />
    <InputText id="lastname" @bind-Value="_userModel.LastName" placeholder="Last Name" />
    <InputSelect class="form-control" @bind-Value="_userModel.Status">
        <option value="0">--Select a Status--</option>
        @foreach (var status in userDataService.GetStatusTypes())
        {
        <option value="@status">@status</option>
        }
    </InputSelect>
    <button type="submit">Save</button>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }
    private bool isEdit { get; set; } = false;

    private JsUsers.Models.UserModel _userModel { get; set; } = new Models.UserModel();

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += HandleLocationChanged;
        CheckEditUri();

    }

    private void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        CheckEditUri();

    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }

    private void CheckEditUri()
    {
        isEdit = false;
        foreach (var split in (NavigationManager.Uri).Split("/"))
        {
            if (split == "Edit")
            {
                isEdit = true;

            }
        }
        StateHasChanged();
    }

    private async void HandleValidSubmit()
    {

    }
}
